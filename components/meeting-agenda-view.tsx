"use client"

import { useState, useMemo } from "react"
import type { Task, Project } from "@/lib/types"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Calendar, Users, Search, Copy, CheckCircle, Clock } from "lucide-react"
import { format } from "date-fns"

interface MeetingAgendaViewProps {
  tasks: Task[]
  currentProject: Project | null
  hasBackground: boolean
}

export function MeetingAgendaView({ tasks, currentProject, hasBackground }: MeetingAgendaViewProps) {
  const isValidDate = (date: any): boolean => {
    if (!date) return false
    const d = new Date(date)
    return d instanceof Date && !isNaN(d.getTime())
  }

  const parseLocalDate = (dateString: string): Date | null => {
    if (!dateString) return null

    // Parse YYYY-MM-DD format manually to avoid UTC interpretation
    const parts = dateString.split("-")
    if (parts.length !== 3) return null

    const year = Number.parseInt(parts[0], 10)
    const month = Number.parseInt(parts[1], 10) - 1 // Month is 0-indexed
    const day = Number.parseInt(parts[2], 10)

    if (isNaN(year) || isNaN(month) || isNaN(day)) return null

    return new Date(year, month, day)
  }

  const safeFormat = (date: any, formatString: string, fallback = "Invalid Date"): string => {
    if (!date) return fallback

    let dateObj: Date | null = null

    // If it's a string that looks like YYYY-MM-DD, parse it locally
    if (typeof date === "string" && /^\d{4}-\d{2}-\d{2}$/.test(date)) {
      dateObj = parseLocalDate(date)
    } else {
      dateObj = new Date(date)
    }

    if (!dateObj || !isValidDate(dateObj)) return fallback

    try {
      return format(dateObj, formatString)
    } catch (error) {
      console.log("[v0] Date formatting error:", error)
      return fallback
    }
  }

  const [meetingDate, setMeetingDate] = useState(() => {
    try {
      return format(new Date(), "yyyy-MM-dd")
    } catch (error) {
      console.log("[v0] Error initializing meeting date:", error)
      return new Date().toISOString().split("T")[0] // Fallback to ISO date string
    }
  })
  const [attendees, setAttendees] = useState("")
  const [searchQuery, setSearchQuery] = useState("")
  const [copySuccess, setCopySuccess] = useState(false)

  // Filter tasks based on search query
  const filteredTasks = useMemo(() => {
    if (!searchQuery.trim()) return []

    const query = searchQuery.toLowerCase()
    return tasks.filter(
      (task) =>
        task.title.toLowerCase().includes(query) ||
        task.description?.toLowerCase().includes(query) ||
        task.owner?.toLowerCase().includes(query) ||
        task.subject?.toLowerCase().includes(query),
    )
  }, [tasks, searchQuery])

  // Separate pending and completed tasks
  const pendingTasks = filteredTasks.filter((task) => !task.is_completed)
  const completedTasks = filteredTasks.filter((task) => task.is_completed)

  // Generate agenda text for clipboard
  const generateAgendaText = () => {
    const attendeesList = attendees
      .split(",")
      .map((a) => a.trim())
      .filter((a) => a)
    const formattedDate = safeFormat(meetingDate, "EEEE, MMMM d, yyyy", "Invalid Date")

    let agenda = `MEETING AGENDA\n`
    agenda += `================\n\n`
    agenda += `Date: ${formattedDate}\n`
    agenda += `Project: ${currentProject?.name || "Default List"}\n`

    if (attendeesList.length > 0) {
      agenda += `Attendees: ${attendeesList.join(", ")}\n`
    }

    agenda += `\n`

    if (searchQuery) {
      agenda += `AGENDA ITEMS (Related to: "${searchQuery}")\n`
      agenda += `${"=".repeat(40)}\n\n`
    }

    if (pendingTasks.length > 0) {
      agenda += `PENDING ITEMS:\n`
      agenda += `--------------\n`
      pendingTasks.forEach((task, index) => {
        agenda += `${index + 1}. ${task.title}\n`
      })
      agenda += `\n`
    }

    if (completedTasks.length > 0) {
      agenda += `COMPLETED ITEMS:\n`
      agenda += `----------------\n`
      completedTasks.forEach((task, index) => {
        agenda += `${index + 1}. ${task.title} âœ“\n`
      })
      agenda += `\n`
    }

    if (pendingTasks.length === 0 && completedTasks.length === 0 && searchQuery) {
      agenda += `No tasks found matching "${searchQuery}"\n\n`
    }

    agenda += `\nGenerated by Smart Tasks App`

    return agenda
  }

  // Copy agenda to clipboard
  const copyToClipboard = async () => {
    try {
      const agendaText = generateAgendaText()
      await navigator.clipboard.writeText(agendaText)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (err) {
      console.error("Failed to copy to clipboard:", err)
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "P1":
        return "bg-red-100 text-red-800 border-red-200"
      case "P2":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "P3":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "P4":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  return (
    <div className={`space-y-6 ${hasBackground ? "bg-white/80 backdrop-blur-sm" : "bg-white"} rounded-lg p-6`}>
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Meeting Agenda</h1>
        <p className="text-gray-600">Create and manage meeting agendas with task integration</p>
      </div>

      {/* Meeting Details */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Meeting Details
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="meeting-date">Meeting Date</Label>
              <Input
                id="meeting-date"
                type="date"
                value={meetingDate}
                onChange={(e) => setMeetingDate(e.target.value)}
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="attendees">Attendees (comma-separated)</Label>
              <Input
                id="attendees"
                placeholder="John Doe, Jane Smith, Mike Johnson"
                value={attendees}
                onChange={(e) => setAttendees(e.target.value)}
                className="mt-1"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Task Search */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="h-5 w-5" />
            Task Search
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-2">
            <Input
              placeholder="Search tasks by name, description, owner, or subject (e.g., 'Mala')"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="flex-1"
            />
            <Button onClick={copyToClipboard} variant="outline" className="flex items-center gap-2 bg-transparent">
              <Copy className="h-4 w-4" />
              {copySuccess ? "Copied!" : "Copy Agenda"}
            </Button>
          </div>
          {searchQuery && (
            <p className="text-sm text-gray-600 mt-2">
              Found {filteredTasks.length} task(s) matching "{searchQuery}"
            </p>
          )}
        </CardContent>
      </Card>

      {/* Agenda Preview */}
      {searchQuery && (
        <Card>
          <CardHeader>
            <CardTitle>Agenda Preview</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {/* Meeting Info */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg mb-2">
                  Meeting: {safeFormat(meetingDate, "EEEE, MMMM d, yyyy", "Invalid Date")}
                </h3>
                <p className="text-gray-600">Project: {currentProject?.name || "Default List"}</p>
                {attendees && (
                  <div className="flex items-center gap-2 mt-2">
                    <Users className="h-4 w-4" />
                    <span className="text-sm">
                      {attendees
                        .split(",")
                        .map((a) => a.trim())
                        .filter((a) => a)
                        .join(", ")}
                    </span>
                  </div>
                )}
              </div>

              {/* Pending Tasks */}
              {pendingTasks.length > 0 && (
                <div>
                  <h4 className="font-semibold text-lg mb-3 flex items-center gap-2">
                    <Clock className="h-5 w-5 text-orange-500" />
                    Pending Items ({pendingTasks.length})
                  </h4>
                  <div className="space-y-3">
                    {pendingTasks.map((task, index) => (
                      <div key={task.id} className="border rounded-lg p-4 bg-white">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <h5 className="font-medium">
                              {index + 1}. {task.title}
                            </h5>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Completed Tasks */}
              {completedTasks.length > 0 && (
                <div>
                  <Separator />
                  <h4 className="font-semibold text-lg mb-3 flex items-center gap-2 mt-6">
                    <CheckCircle className="h-5 w-5 text-green-500" />
                    Completed Items ({completedTasks.length})
                  </h4>
                  <div className="space-y-2">
                    {completedTasks.map((task, index) => (
                      <div key={task.id} className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                        <CheckCircle className="h-4 w-4 text-green-500" />
                        <span className="text-gray-700">
                          {index + 1}. {task.title}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* No Results */}
              {filteredTasks.length === 0 && searchQuery && (
                <div className="text-center py-8 text-gray-500">
                  <Search className="h-12 w-12 mx-auto mb-3 opacity-50" />
                  <p>No tasks found matching "{searchQuery}"</p>
                  <p className="text-sm">Try a different search term or check your spelling</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
