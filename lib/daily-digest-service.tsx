import { createClient } from "@/lib/supabase/server"
import { sendEmail } from "@/lib/email-service"
import type { Task } from "@/lib/types"

export interface DigestPreferences {
  enabled: boolean
  time: string // HH:MM format
  timezone: string
  includeDays: number // days ahead to include (default 5)
}

export async function generateDailyDigest(userId: string): Promise<string> {
  const supabase = createClient()

  // Get tasks due in the next 5 days
  const today = new Date()
  const fiveDaysFromNow = new Date(today)
  fiveDaysFromNow.setDate(today.getDate() + 5)

  const { data: tasks, error } = await supabase
    .from("tasks")
    .select("*")
    .eq("user_id", userId)
    .eq("is_completed", false)
    .gte("due_date", today.toISOString().split("T")[0])
    .lte("due_date", fiveDaysFromNow.toISOString().split("T")[0])
    .order("due_date", { ascending: true })

  if (error || !tasks) {
    throw new Error("Failed to fetch tasks for digest")
  }

  // Group tasks by due date
  const tasksByDate = tasks.reduce((acc: Record<string, Task[]>, task) => {
    const dueDate = task.due_date || "No due date"
    if (!acc[dueDate]) acc[dueDate] = []
    acc[dueDate].push(task)
    return acc
  }, {})

  // Generate HTML content
  let htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
      <h1 style="color: #333; border-bottom: 2px solid #4F46E5; padding-bottom: 10px;">
        ðŸ“‹ Your Smart Tasks Digest
      </h1>
      <p style="color: #666; margin-bottom: 30px;">
        Here are your upcoming tasks for the next 5 days:
      </p>
  `

  if (tasks.length === 0) {
    htmlContent += `
      <div style="background: #F0FDF4; border: 1px solid #BBF7D0; border-radius: 8px; padding: 20px; text-align: center;">
        <h3 style="color: #16A34A; margin: 0;">ðŸŽ‰ All caught up!</h3>
        <p style="color: #15803D; margin: 10px 0 0 0;">You have no tasks due in the next 5 days.</p>
      </div>
    `
  } else {
    Object.entries(tasksByDate).forEach(([date, dateTasks]) => {
      const isOverdue = new Date(date) < today
      const isToday = new Date(date).toDateString() === today.toDateString()

      let dateStyle = "background: #F8FAFC; border-left: 4px solid #64748B;"
      let dateLabel = new Date(date).toLocaleDateString("en-US", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      })

      if (isOverdue) {
        dateStyle = "background: #FEF2F2; border-left: 4px solid #EF4444;"
        dateLabel += " (OVERDUE)"
      } else if (isToday) {
        dateStyle = "background: #FFF7ED; border-left: 4px solid #F97316;"
        dateLabel += " (TODAY)"
      }

      htmlContent += `
        <div style="${dateStyle} margin-bottom: 20px; padding: 15px; border-radius: 8px;">
          <h3 style="margin: 0 0 15px 0; color: #374151;">${dateLabel}</h3>
          <ul style="margin: 0; padding-left: 20px;">
      `

      dateTasks.forEach((task) => {
        const priorityColor =
          task.priority === "P1"
            ? "#EF4444"
            : task.priority === "P2"
              ? "#F97316"
              : task.priority === "P3"
                ? "#10B981"
                : "#6B7280"

        htmlContent += `
          <li style="margin-bottom: 10px; color: #374151;">
            <strong>${task.title}</strong>
            ${task.priority ? `<span style="background: ${priorityColor}; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-left: 8px;">${task.priority}</span>` : ""}
            ${task.is_urgent ? '<span style="background: #DC2626; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-left: 4px;">URGENT</span>' : ""}
            ${task.owner ? `<br><span style="color: #6B7280; font-size: 14px;">Assigned to: ${task.owner}</span>` : ""}
            ${task.description ? `<br><span style="color: #6B7280; font-size: 14px;">${task.description}</span>` : ""}
          </li>
        `
      })

      htmlContent += `
          </ul>
        </div>
      `
    })
  }

  htmlContent += `
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #E5E7EB; text-align: center; color: #6B7280; font-size: 14px;">
        <p>This digest was generated by Smart Tasks. You can manage your digest preferences in the app settings.</p>
      </div>
    </div>
  `

  return htmlContent
}

export async function sendDailyDigest(userEmail: string, userId: string): Promise<boolean> {
  try {
    const digestContent = await generateDailyDigest(userId)

    await sendEmail({
      to: userEmail,
      subject: `ðŸ“‹ Your Smart Tasks Digest - ${new Date().toLocaleDateString()}`,
      html: digestContent,
    })

    return true
  } catch (error) {
    console.error("Failed to send daily digest:", error)
    return false
  }
}

export async function scheduleDigestForUser(userEmail: string, userId: string, preferences: DigestPreferences) {
  if (!preferences.enabled) return

  // This would typically integrate with a job scheduler like Vercel Cron Jobs
  // For now, we'll create an API endpoint that can be called by a cron service
  console.log(`Scheduling daily digest for ${userEmail} at ${preferences.time}`)
}
